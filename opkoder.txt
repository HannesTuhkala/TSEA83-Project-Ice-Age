0000 NOP
0001 MOVE
0010 mapStore (MAPS)
0011 ADD
0100 SUB
0101 MULT
0110 SHIFT
0111 Collision (COL)
1000 Compare (CMP)
1001 Set flag - z:n (SETF)
1010 Branch on Flag - z:n (BRF)
1011 Branch (BRA)
1111 HALT


31           28 27          26 25           18 17         16  15            8 7              0
[4 bitar opkod] [2 bitar am1 ] [8 bitar term1] [2 bitar am2]  [8 bitar term2] [8 bitar utaddr]

Term1 tolkas alltid som register(term1).

Tolkning av am2 om va (vanlig addresserning) angivet:
am2 = 00 -> direkt angivet värde
am2 = 01 -> register(term)

<mode> är <IMED, DIR>

0000 NOP
Utför ingen operation.
NOP

0001 MOVE
Lagrar term2 till register(utaddr).
MOVE <utaddr> <term2>

0010 mapStore (MAPS)
Lagra term2 (va) i mapm address reg(utaddr)
MAPS <utaddr> <mode> <term2>

0011 ADD
Addera reg(term1) med term2 (va), lagra i reg(utaddr)
Sätter n = '1' om summan överskrider 255, annars n = '0'.
ADD <term1> <mode> <term2> <utaddr>

0100 SUB
Subtrahera reg(term1) med term2 (va), lagra i reg(utaddr)
Sätter z hög om res = 0, sätter N hög om res < 0, annars negativa
SUB <term1> <mode> <term2> <utaddr>

0101 MULT
Multiplicerar reg(term1) med term2 (va), lagra i reg(utaddr)
MULT <term1> <mode> <term2> <utaddr>

0110 SHIFT
Shifta reg(term1) vänster med 4 bitar, lagra i reg(utaddr)
SHIFT <term1> <utaddr>

0111 Collision (COL)
Tar indata term2 = (4 bitar Y coord.  | 4 bitar X coord)
	   lagrar mapm(term2) i reg(utaddr)
COL

1000 Compare (CMP)
Fungerar som SUB, men lagrar inget värde i register, använder alltså inte utaddr
CMP <term1> <mode> <term2>

1001 Set flag (SETF) - z/n
am2 = 10 -> z <= 0 (Z0)
am2 = 11 -> z <= 1 (Z1)
am2 = 00 -> n <= 0 (N0)
am2 = 01 -> n <= 1 (N1)
SETF <Z0, Z1, N0, N1>

1010 Branch on Flag (BRF) - z/n
om ((am2(0) = 0 && z = 1) || (am2(0) = 1 && n = 1))
	branch (dvs pc = pc + term1 (direkt addressering)) - 128
BRF <term1> <Z, N>

1011 Branch (BRA)
pc = pc + term1 (direkt addressering) - 128
BRA <term1>

1111 HALT
Stop execution -- currently not implemented.
HALT
